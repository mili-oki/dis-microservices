package com.example.dis.gateway.security;

import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.ReactiveSecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.util.stream.Collectors;

@Component
public class UserRolesPropagationFilter implements GlobalFilter, Ordered {

  @Override
  public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
    return ReactiveSecurityContextHolder.getContext()
        .map(ctx -> ctx.getAuthentication())
        .defaultIfEmpty(null)
        .flatMap(auth -> {
          if (auth != null && auth.isAuthenticated()) {
            String username = String.valueOf(auth.getPrincipal());
            String roles = auth.getAuthorities().stream()
                .map(GrantedAuthority::getAuthority)
                .collect(Collectors.joining(","));
            exchange.getRequest().mutate()
                .header("X-User", username)
                .header("X-Roles", roles)
                .build();
          }
          return chain.filter(exchange);
        });
  }

  @Override
  public int getOrder() {
    return -1; // dovoljno rano
  }
}
