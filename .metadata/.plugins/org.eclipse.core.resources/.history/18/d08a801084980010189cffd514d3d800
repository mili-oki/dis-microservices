package com.example.dis.gateway.security;

import io.jsonwebtoken.Claims;
import org.springframework.security.authentication.ReactiveAuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Mono;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class JwtReactiveAuthenticationManager implements ReactiveAuthenticationManager {

  private final JwtUtil jwt;

  public JwtReactiveAuthenticationManager(JwtUtil jwt) { this.jwt = jwt; }

  @Override
  public Mono<Authentication> authenticate(Authentication authentication) {
    String token = (String) authentication.getCredentials();
    try {
      Claims claims = jwt.validateAndGet(token);
      String username = claims.getSubject();
      Object rolesRaw = claims.get("roles");
      Collection<SimpleGrantedAuthority> authorities = List.of();
      if (rolesRaw instanceof List<?> list) {
        authorities = list.stream()
            .map(Object::toString)
            .map(SimpleGrantedAuthority::new)
            .collect(Collectors.toList());
      }
      return Mono.just(new UsernamePasswordAuthenticationToken(username, token, authorities));
    } catch (Exception e) {
      return Mono.empty(); // invalidan token -> 401
    }
  }
}
