package com.example.dis.auth_service.service;

import com.example.dis.auth_service.domain.UserAccount;
import com.example.dis.auth_service.repository.UserAccountRepository;
import com.example.dis.auth_service.security.JwtUtil;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AuthService {

  private final UserAccountRepository repo;
  private final PasswordEncoder encoder;
  private final JwtUtil jwt;

  public AuthService(UserAccountRepository repo, PasswordEncoder encoder, JwtUtil jwt) {
    this.repo = repo;
    this.encoder = encoder;
    this.jwt = jwt;
  }

  public UserAccount register(String username, String rawPassword) {
    if (repo.existsByUsername(username)) {
      throw new DataIntegrityViolationException("Username taken");
    }
    UserAccount u = new UserAccount();
    u.setUsername(username);
    u.setPasswordHash(encoder.encode(rawPassword));
    u.setRoles("ROLE_USER"); 
    return repo.save(u);
  }

  public String login(String username, String rawPassword) {
    UserAccount u = repo.findByUsername(username)
        .orElseThrow(() -> new IllegalArgumentException("Bad credentials"));

    if (!encoder.matches(rawPassword, u.getPasswordHash())) {
      throw new IllegalArgumentException("Bad credentials");
    }
    return jwt.generate(u.getUsername(), List.of("ROLE_USER"));
  }
}
