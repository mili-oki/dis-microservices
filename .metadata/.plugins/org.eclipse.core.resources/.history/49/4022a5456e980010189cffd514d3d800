package com.example.dis.gateway.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.config.web.server.SecurityWebFiltersOrder;
import org.springframework.security.web.server.SecurityWebFilterChain;
import org.springframework.security.web.server.authentication.AuthenticationWebFilter;
import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;
import org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher;
import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;
import org.springframework.security.web.server.util.matcher.PathPatternParserServerWebExchangeMatcher;

@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {

  private final JwtReactiveAuthenticationManager authManager;
  private final BearerTokenServerAuthenticationConverter converter;

  public SecurityConfig(JwtReactiveAuthenticationManager authManager,
                        BearerTokenServerAuthenticationConverter converter) {
    this.authManager = authManager;
    this.converter = converter;
  }

  @Bean
  public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {
    AuthenticationWebFilter authWebFilter = new AuthenticationWebFilter(authManager);
    authWebFilter.setServerAuthenticationConverter(converter);

    // ⛔️ NE POKREĆI JWT AUTENTIKACIJU na javnim rutama
    ServerWebExchangeMatcher publicMatchers = new OrServerWebExchangeMatcher(
        new PathPatternParserServerWebExchangeMatcher("/auth-service/auth/**"),
        new PathPatternParserServerWebExchangeMatcher("/actuator/**"),
        new PathPatternParserServerWebExchangeMatcher("/eureka/**")
    );
    authWebFilter.setRequiresAuthenticationMatcher(new NegatedServerWebExchangeMatcher(publicMatchers));

    return http
        .csrf(ServerHttpSecurity.CsrfSpec::disable)
        .httpBasic(ServerHttpSecurity.HttpBasicSpec::disable)
        .formLogin(ServerHttpSecurity.FormLoginSpec::disable)
        .authorizeExchange(reg -> reg
            .pathMatchers("/auth-service/auth/**", "/actuator/**", "/eureka/**").permitAll()
            .anyExchange().authenticated()
        )
        .addFilterAt(authWebFilter, SecurityWebFiltersOrder.AUTHENTICATION)
        .build();
  }
}
