package com.example.dis.orders_service;

import com.example.dis.orders_service.client.CatalogClient;
import com.example.dis.orders_service.client.ProductDto;
import com.example.dis.orders_service.model.Order;
import com.example.dis.orders_service.service.OrderService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.*;

import java.math.BigDecimal;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@SpringBootTest(
    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
    properties = {
        "spring.profiles.active=test",
        // H2
        "spring.datasource.url=jdbc:h2:mem:orderstest;MODE=PostgreSQL;DB_CLOSE_DELAY=-1",
        "spring.datasource.driverClassName=org.h2.Driver",
        "spring.datasource.username=sa",
        "spring.datasource.password=",
        "spring.jpa.hibernate.ddl-auto=create-drop",
        "eureka.client.enabled=false",
        "spring.cloud.discovery.enabled=false",
        "spring.cloud.openfeign.enabled=false",
        "spring.rabbitmq.listener.simple.auto-startup=false",
        "spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration"
    }
)
class OrdersApiTest {

    @LocalServerPort int port;

    @Autowired TestRestTemplate rest;

    @Autowired OrderService orderService;

    @MockBean CatalogClient catalogClient; 

    @Test
    void confirm_and_list_endpoints_work() {
        // 1) Seed narud≈æbine preko servisa (stabilno)
        ProductDto p = new ProductDto();
        p.setId(5L);
        p.setName("Test");
        p.setPrice(new BigDecimal("9.99"));
        p.setStock(100);
        when(catalogClient.getProductById(5L)).thenReturn(p);

        Order created = orderService.createOrder(5L, 2);
        Long id = created.getId();
        assertThat(id).isNotNull();

        String base = "http://localhost:" + port;

        // 2) Pogodi endpoint: PUT /orders/{id}/confirm
        ResponseEntity<Map> confirmRes = rest.exchange(
            base + "/orders/" + id + "/confirm",
            HttpMethod.PUT,
            HttpEntity.EMPTY,
            Map.class
        );
        assertThat(confirmRes.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(confirmRes.getBody()).isNotNull();
        assertThat(confirmRes.getBody().get("id")).isIn(id.intValue(), id.longValue());

        assertThat(confirmRes.getBody().get("status")).isNotNull();

        // 3) Pogodi endpoint: GET /orders (lista)
        ResponseEntity<String> listRes = rest.getForEntity(base + "/orders", String.class);
        assertThat(listRes.getStatusCode()).isEqualTo(HttpStatus.OK);
        assertThat(listRes.getBody()).contains(String.valueOf(id));
    }
}
