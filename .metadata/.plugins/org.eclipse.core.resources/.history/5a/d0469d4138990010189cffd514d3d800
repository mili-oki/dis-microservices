package com.example.dis.orders_service.service;

import com.example.dis.orders_service.client.CatalogClient;
import com.example.dis.orders_service.client.ProductDto;
import com.example.dis.orders_service.model.Order;
import com.example.dis.orders_service.model.OrderStatus;
import com.example.dis.orders_service.repository.OrderRepository;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;

@Service
public class OrderService {
    private final OrderRepository orderRepository;
    private final CatalogClient catalogClient;

    public OrderService(OrderRepository orderRepository, CatalogClient catalogClient) {
        this.orderRepository = orderRepository;
        this.catalogClient = catalogClient;
    }

    public List<Order> getAll() {
        return orderRepository.findAll();
    }

    public Order getById(Long id) {
        return orderRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Order not found"));
    }

    @Transactional
    public Order createOrder(Long productId, Integer quantity) {
        ProductDto product = catalogClient.getProductById(productId);
        if (product == null || product.getStock() == null || product.getStock() < quantity) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Product not available");
        }
        Order order = new Order();
        order.setProductId(productId);
        order.setQuantity(quantity);
        order.setStatus(OrderStatus.PENDING);
        return orderRepository.save(order);
    }

    @Transactional
    public Order updateQuantity(Long id, Integer newQty) {
        Order o = getById(id);
        if (o.getStatus() != OrderStatus.PENDING) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Only PENDING orders can change quantity");
        }
        ProductDto product = catalogClient.getProductById(o.getProductId());
        if (product == null || product.getStock() == null || product.getStock() < newQty) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Insufficient stock");
        }
        o.setQuantity(newQty);
        return orderRepository.save(o);
    }

    @Transactional
    public Order confirm(Long id) {
        Order o = getById(id);
        if (o.getStatus() != OrderStatus.PENDING) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Only PENDING orders can be confirmed");
        }
        o.setStatus(OrderStatus.CONFIRMED);
        return orderRepository.save(o);
    }

    @Transactional
    public Order cancel(Long id) {
        Order o = getById(id);
        if (o.getStatus() == OrderStatus.CANCELLED) {
            return o;
        }
        if (o.getStatus() == OrderStatus.CONFIRMED) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "CONFIRMED orders cannot be cancelled");
        }
        o.setStatus(OrderStatus.CANCELLED);
        return orderRepository.save(o);
    }

    @Transactional
    public void delete(Long id) {
        Order o = getById(id);
        if (o.getStatus() == OrderStatus.CONFIRMED) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Cannot delete CONFIRMED orders");
        }
        orderRepository.delete(o);
    }
    
    @Transactional
    public Order updateStatus(Long id, OrderStatus newStatus) {
        Order o = getById(id);

        // idempotentno
        if (o.getStatus() == newStatus) {
            return o;
        }

        // terminalni statusi – ne diramo
        if (o.getStatus() == OrderStatus.CANCELLED || o.getStatus() == OrderStatus.PAYED) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Terminal state; status cannot be changed");
        }

        // dozvoli SPECIFIČNE prelaze:
        switch (newStatus) {
            case PENDING -> {
                // koristimo za rollback posle payment FAILED:
                // dozvoljeno samo iz CONFIRMED (npr. rezervacija potvrđena, ali plaćanje palo)
                if (o.getStatus() != OrderStatus.CONFIRMED) {
                    throw new ResponseStatusException(HttpStatus.CONFLICT, "Only CONFIRMED → PENDING is allowed");
                }
                o.setStatus(OrderStatus.PENDING);
            }
            case PAYED -> {
                // postavljamo posle payment SUCCESS
                // ne dozvoljavamo ako je CANCELLED ili već PAYED (već pokriveno gore)
                o.setStatus(OrderStatus.PAYED);
            }
            case CONFIRMED -> {
                // ručno potvrđivanje (već imaš confirm(id)), ali dodajemo radi potpunosti
                if (o.getStatus() != OrderStatus.PENDING) {
                    throw new ResponseStatusException(HttpStatus.CONFLICT, "Only PENDING → CONFIRMED");
                }
                o.setStatus(OrderStatus.CONFIRMED);
            }
            case CANCELLED -> {
                // imaš cancel(id); dodajemo ovde ako želiš generički put
                if (o.getStatus() == OrderStatus.CONFIRMED || o.getStatus() == OrderStatus.PAYED) {
                    throw new ResponseStatusException(HttpStatus.CONFLICT, "Cannot cancel CONFIRMED/PAYED");
                }
                o.setStatus(OrderStatus.CANCELLED);
            }
        }

        return orderRepository.save(o);
    }
}
