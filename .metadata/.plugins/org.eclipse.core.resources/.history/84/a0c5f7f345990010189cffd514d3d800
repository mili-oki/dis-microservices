package com.example.dis.payments_service.service;

import com.example.dis.payments_service.client.NotificationsClient;
import com.example.dis.payments_service.client.OrderDto;
import com.example.dis.payments_service.client.OrdersClient;
import com.example.dis.payments_service.model.Payment;
import com.example.dis.payments_service.model.PaymentStatus;
import com.example.dis.payments_service.repository.PaymentRepository;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

class PaymentServiceTest {

    private final PaymentRepository repo = mock(PaymentRepository.class);
    private final OrdersClient ordersClient = mock(OrdersClient.class);
    private final NotificationsClient notificationsClient = mock(NotificationsClient.class);

    private final PaymentService service = new PaymentService(repo, ordersClient, notificationsClient, null);

    @Test
    void createPayment_persists_and_notifies() {
        Long orderId = 42L;
        BigDecimal amount = new BigDecimal("99.99");

        OrderDto order = new OrderDto();
        order.setId(orderId);
        when(ordersClient.getOrder(orderId)).thenReturn(order);

        // mock save
        ArgumentCaptor<Payment> captor = ArgumentCaptor.forClass(Payment.class);
        when(repo.save(any(Payment.class))).thenAnswer(inv -> {
            Payment p = inv.getArgument(0);
            p.setId(1L);
            p.setCreatedAt(OffsetDateTime.now());
            return p;
        });

        Payment created = service.pay(orderId, amount);

        assertThat(created.getId()).isNotNull();
        assertThat(created.getAmount()).isEqualByComparingTo(amount);
        assertThat(created.getStatus()).isEqualTo(PaymentStatus.SUCCESS);

        verify(repo).save(captor.capture());
        verify(ordersClient).getOrder(orderId);
        verify(notificationsClient).notifyPayment(any()); // minimalna verifikacija
    }

    @Test
    void getById_returnsPayment() {
        Payment p = new Payment();
        p.setId(5L);
        when(repo.findById(5L)).thenReturn(Optional.of(p));

        assertThat(service.getById(5L).getId()).isEqualTo(5L);
    }
}
