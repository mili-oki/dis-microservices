package com.example.dis.catalog_service;

import com.example.dis.catalog_service.model.Product;
import com.example.dis.catalog_service.repository.ProductRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.math.BigDecimal;
import java.util.LinkedHashMap;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(
    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
    properties = {
        "spring.profiles.active=test",
        "spring.datasource.url=jdbc:h2:mem:cattest;MODE=PostgreSQL;DB_CLOSE_DELAY=-1",
        "spring.datasource.driverClassName=org.h2.Driver",
        "spring.datasource.username=sa",
        "spring.datasource.password=",
        "spring.jpa.hibernate.ddl-auto=create-drop",
        "eureka.client.enabled=false",
        "spring.cloud.discovery.enabled=false"
    }
)
class CatalogApiTest {

    @LocalServerPort
    int port;

    @Autowired
    TestRestTemplate rest;

    @Autowired
    ProductRepository repo;

    @Test
    void list_products_endpoint_returns_200_and_contains_seed() {
        // seed u H2
        Product p = new Product();
        p.setName("SeedItem");
        p.setPrice(new BigDecimal("1.00"));
        Product saved = repo.save(p);

        String base = "http://localhost:" + port;
        String[] candidates = { "/products", "/api/products", "/catalog/products" };

        ResponseEntity<String> hit = null;
        String used = null;
        Map<String, HttpStatus> tried = new LinkedHashMap<>();

        for (String path : candidates) {
            ResponseEntity<String> res = rest.getForEntity(base + path, String.class);
            tried.put(path, res.getStatusCode());
            if (res.getStatusCode().is2xxSuccessful()) {
                hit = res;
                used = path;
                break;
            }
        }

        assertThat(hit)
            .withFailMessage("None of the candidate endpoints returned 2xx, tried: %s", tried)
            .isNotNull();

        // telo treba da sadr≈æi barem ID ili naziv seed proizvoda
        assertThat(hit.getBody()).contains("SeedItem");
        // info: koji path je radio (korisno u logu)
        System.out.println("CatalogApiTest hit endpoint: " + used);
    }

    @Test
    void get_product_by_id_returns_200() {
        Product p = new Product();
        p.setName("SingleItem");
        p.setPrice(new BigDecimal("2.50"));
        Product saved = repo.save(p);

        String base = "http://localhost:" + port;
        String id = String.valueOf(saved.getId());
        String[] candidates = {
            "/products/" + id,
            "/api/products/" + id,
            "/catalog/products/" + id
        };

        ResponseEntity<String> hit = null;
        String used = null;

        for (String path : candidates) {
            ResponseEntity<String> res = rest.getForEntity(base + path, String.class);
            if (res.getStatusCode().is2xxSuccessful()) {
                hit = res;
                used = path;
                break;
            }
        }

        assertThat(hit)
            .withFailMessage("No 2xx for GET by id on candidates: %s", String.join(", ", candidates))
            .isNotNull();

        assertThat(hit.getBody()).contains("SingleItem");
        System.out.println("CatalogApiTest GET by id hit: " + used);
    }
}
