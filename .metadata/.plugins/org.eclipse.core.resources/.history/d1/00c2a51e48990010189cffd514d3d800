package com.example.dis.auth_service;

import com.example.dis.auth_service.domain.UserAccount;
import com.example.dis.auth_service.repository.UserAccountRepository;
import com.example.dis.auth_service.security.JwtUtil;
import com.example.dis.auth_service.service.AuthService;
import org.junit.jupiter.api.Test;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.*;

class AuthServiceTest {

    private final UserAccountRepository repo = mock(UserAccountRepository.class);
    private final PasswordEncoder encoder = mock(PasswordEncoder.class);
    private final JwtUtil jwt = new JwtUtil();
    private final AuthService service = new AuthService(repo, encoder, jwt);

    @Test
    void login_returns_token_when_user_exists() {
        UserAccount ua = new UserAccount();
        ua.setId(1L);
        ua.setEmail("a@b.com");
        ua.setPassword("pwd"); // pretpostavka: plain ili veÄ‡ hashirano

        when(repo.findByEmail("a@b.com")).thenReturn(Optional.of(ua));

        String token = service.login("a@b.com", "pwd");
        assertThat(token).isNotBlank();
        assertThat(token.split("\\.")).hasSize(3); // JWT
    }

    @Test
    void register_persists_user() {
        UserAccount ua = new UserAccount();
        ua.setId(2L);
        when(repo.save(any(UserAccount.class))).thenReturn(ua);

        var saved = service.register("x@y.com", "pwd");
        assertThat(saved.getId()).isEqualTo(2L);
        verify(repo).save(any(UserAccount.class));
    }
}
