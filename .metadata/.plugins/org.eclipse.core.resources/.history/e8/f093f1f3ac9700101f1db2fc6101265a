package com.example.dis.orders_service.service;

import com.example.dis.orders_service.client.CatalogClient;
import com.example.dis.orders_service.client.ProductDto;
import com.example.dis.orders_service.model.Order;
import com.example.dis.orders_service.model.OrderStatus;
import com.example.dis.orders_service.repository.OrderRepository;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;

@Service
public class OrderService {
    private final OrderRepository orderRepository;
    private final CatalogClient catalogClient;

    public OrderService(OrderRepository orderRepository, CatalogClient catalogClient) {
        this.orderRepository = orderRepository;
        this.catalogClient = catalogClient;
    }

    public List<Order> getAll() {
        return orderRepository.findAll();
    }

    public Order getById(Long id) {
        return orderRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Order not found"));
    }

    @Transactional
    public Order createOrder(Long productId, Integer quantity) {
        ProductDto product = catalogClient.getProductById(productId);
        if (product == null || product.getStock() == null || product.getStock() < quantity) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Product not available");
        }
        Order order = new Order();
        order.setProductId(productId);
        order.setQuantity(quantity);
        order.setStatus(OrderStatus.PENDING);
        return orderRepository.save(order);
    }

    @Transactional
    public Order updateQuantity(Long id, Integer newQty) {
        Order o = getById(id);
        if (o.getStatus() != OrderStatus.PENDING) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Only PENDING orders can change quantity");
        }
        ProductDto product = catalogClient.getProductById(o.getProductId());
        if (product == null || product.getStock() == null || product.getStock() < newQty) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Insufficient stock");
        }
        o.setQuantity(newQty);
        return orderRepository.save(o);
    }

    @Transactional
    public Order confirm(Long id) {
        Order o = getById(id);
        if (o.getStatus() != OrderStatus.PENDING) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Only PENDING orders can be confirmed");
        }
        o.setStatus(OrderStatus.CONFIRMED);
        return orderRepository.save(o);
    }

    @Transactional
    public Order cancel(Long id) {
        Order o = getById(id);
        if (o.getStatus() == OrderStatus.CANCELLED) {
            return o; // idempotentno
        }
        if (o.getStatus() == OrderStatus.CONFIRMED) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "CONFIRMED orders cannot be cancelled");
        }
        o.setStatus(OrderStatus.CANCELLED);
        return orderRepository.save(o);
    }

    @Transactional
    public void delete(Long id) {
        Order o = getById(id);
        if (o.getStatus() == OrderStatus.CONFIRMED) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Cannot delete CONFIRMED orders");
        }
        orderRepository.delete(o);
    }
}
package com.example.dis.orders_service.service;

import com.example.dis.orders_service.client.CatalogClient;
import com.example.dis.orders_service.client.ProductDto;
import com.example.dis.orders_service.model.Order;
import com.example.dis.orders_service.model.OrderStatus;
import com.example.dis.orders_service.repository.OrderRepository;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;

@Service
public class OrderService {
    private final OrderRepository orderRepository;
    private final CatalogClient catalogClient;

    public OrderService(OrderRepository orderRepository, CatalogClient catalogClient) {
        this.orderRepository = orderRepository;
        this.catalogClient = catalogClient;
    }

    public List<Order> getAll() {
        return orderRepository.findAll();
    }

    public Order getById(Long id) {
        return orderRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Order not found"));
    }

    @Transactional
    public Order createOrder(Long productId, Integer quantity) {
        ProductDto product = catalogClient.getProductById(productId);
        if (product == null || product.getStock() == null || product.getStock() < quantity) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Product not available");
        }
        Order order = new Order();
        order.setProductId(productId);
        order.setQuantity(quantity);
        order.setStatus(OrderStatus.PENDING);
        return orderRepository.save(order);
    }

    @Transactional
    public Order updateQuantity(Long id, Integer newQty) {
        Order o = getById(id);
        if (o.getStatus() != OrderStatus.PENDING) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Only PENDING orders can change quantity");
        }
        ProductDto product = catalogClient.getProductById(o.getProductId());
        if (product == null || product.getStock() == null || product.getStock() < newQty) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Insufficient stock");
        }
        o.setQuantity(newQty);
        return orderRepository.save(o);
    }

    @Transactional
    public Order confirm(Long id) {
        Order o = getById(id);
        if (o.getStatus() != OrderStatus.PENDING) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Only PENDING orders can be confirmed");
        }
        o.setStatus(OrderStatus.CONFIRMED);
        return orderRepository.save(o);
    }

    @Transactional
    public Order cancel(Long id) {
        Order o = getById(id);
        if (o.getStatus() == OrderStatus.CANCELLED) {
            return o; // idempotentno
        }
        if (o.getStatus() == OrderStatus.CONFIRMED) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "CONFIRMED orders cannot be cancelled");
        }
        o.setStatus(OrderStatus.CANCELLED);
        return orderRepository.save(o);
    }

    @Transactional
    public void delete(Long id) {
        Order o = getById(id);
        if (o.getStatus() == OrderStatus.CONFIRMED) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, "Cannot delete CONFIRMED orders");
        }
        orderRepository.delete(o);
    }
}
