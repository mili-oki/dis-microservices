package com.example.dis.orders_service;

import com.example.dis.orders_service.client.CatalogClient;
import com.example.dis.orders_service.client.ProductDto;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.*;

import java.math.BigDecimal;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@SpringBootTest(
    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
    properties = { "spring.profiles.active=test" }
)
class OrdersApiTest {

    @LocalServerPort
    int port;

    @Autowired
    TestRestTemplate rest;

    @MockBean
    CatalogClient catalogClient; // stub za upit proizvoda

    @Test
    void createOrder_returns_201_and_body() {
        ProductDto p = new ProductDto();
        p.setId(5L);
        p.setName("Test");
        p.setPrice(new BigDecimal("9.99"));
        when(catalogClient.getProductById(5L)).thenReturn(p);

        String base = "http://localhost:" + port;
        ResponseEntity<Map> res = rest.postForEntity(
            base + "/orders?productId=5&quantity=2",
            null,
            Map.class
        );

        assertThat(res.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(res.getBody()).isNotNull();
        assertThat(res.getBody().get("id")).isNotNull();
    }

    @Test
    void getAll_returns_200() {
        String base = "http://localhost:" + port;
        ResponseEntity<String> res = rest.getForEntity(base + "/orders", String.class);
        assertThat(res.getStatusCode()).isEqualTo(HttpStatus.OK);
    }
}
