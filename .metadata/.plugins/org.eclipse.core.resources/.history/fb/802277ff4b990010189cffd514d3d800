package com.example.dis.payments_service;

import com.example.dis.payments_service.client.NotificationsClient;
import com.example.dis.payments_service.client.OrderDto;
import com.example.dis.payments_service.client.OrdersClient;
import com.example.dis.payments_service.model.Payment;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.*;

import java.math.BigDecimal;
import java.net.URI;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,
        properties = {
          "spring.profiles.active=test",
          "spring.jpa.hibernate.ddl-auto=create-drop"
        })
class PaymentApiIT {

    @LocalServerPort
    int port;

    @Autowired
    TestRestTemplate rest;

    @MockBean
    OrdersClient ordersClient;

    @MockBean
    NotificationsClient notificationsClient;

    @Test
    void createPayment_endpoint_returns_201_and_body() {
        // stub feign
        OrderDto dto = new OrderDto();
        dto.setId(7L);
        when(ordersClient.getOrder(7L)).thenReturn(dto);

        String url = "http://localhost:" + port + "/payments?orderId=7&amount=99.99";
        ResponseEntity<Payment> res = rest.postForEntity(URI.create(url), null, Payment.class);

        assertThat(res.getStatusCode()).isEqualTo(HttpStatus.CREATED);
        assertThat(res.getBody()).isNotNull();
        assertThat(res.getBody().getAmount()).isEqualByComparingTo(new BigDecimal("99.99"));
    }

    @Test
    void getAll_returns_200() {
        ResponseEntity<String> res = rest.getForEntity("http://localhost:" + port + "/payments", String.class);
        assertThat(res.getStatusCode()).isEqualTo(HttpStatus.OK);
    }
}
